{"version":3,"sources":["components/HomePage.js","components/globalComponents/Main.js","components/globalComponents/NavBar.js","components/globalComponents/SideBarMenu.js","components/globalComponents/SideBarConfigMenu.js","components/MainBody.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","Section","Component","styled","div","_templateObject","Main","Switch","Route","path","exact","component","NavBar","_this$props","this","props","isInAside","toogleConfigMenu","Wrapper","className","Option","Icon","onClick","NavBar_templateObject","_ref","_templateObject2","i","_templateObject3","SideBarMenu","getMenuOptions","icon","text","map","item","Item","SideBarMenu_Wrapper","SideBarMenu_templateObject","SideBarMenu_templateObject2","SideBarConfigMenu","SideBarConfigMenu_Wrapper","SideBarConfigMenu_templateObject","MainBody","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","children","MainBody_Wrapper","globalComponents_NavBar","Body","globalComponents_SideBarMenu","Content","globalComponents_SideBarConfigMenu","MainBody_templateObject","MainBody_templateObject2","MainBody_templateObject3","App","components_MainBody","globalComponents_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uYAGMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,kBAEEF,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAD,cAXeC,aAiBjBD,EAAUE,IAAOC,IAAVC,KAKER,ICdAS,EANF,kBACXR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWd,8yBCJ/Be,mLACK,IAAAC,EACiCC,KAAKC,MAArCC,EADDH,EACCG,UAAWC,EADZJ,EACYI,iBAEnB,OACEnB,EAAAC,EAAAC,cAACkB,EAAD,CACEF,UAAWA,GAEXlB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBAAf,aAGArB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,qBACbrB,EAAAC,EAAAC,cAACoB,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAD,CAAMF,UAAU,mBAElBrB,EAAAC,EAAAC,cAACoB,EAAD,CACEE,QAASL,GAETnB,EAAAC,EAAAC,cAACqB,EAAD,CACEF,UAAU,yBAnBHjB,aA4BfgB,EAAUf,IAAOC,IAAVmB,IAEH,SAAAC,GAAA,OAAAA,EAAGR,UAA6B,SAAW,IAsB/CI,EAASjB,IAAOC,IAAVqB,KAWNJ,EAAOlB,IAAOuB,EAAVC,KAKKf,+oBCpETgB,6MACJC,eAAiB,WAWf,MAVgB,CACd,CACEC,KAAM,eACNC,KAAM,SAER,CACED,KAAM,uBACNC,KAAM,WAGKC,IAAI,SAAAC,GAAI,OACrBnC,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACbrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAWc,EAAKH,QAErBhC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACZc,EAAKF,kFAOZ,OACEjC,EAAAC,EAAAC,cAACmC,EAAD,KACGrB,KAAKe,yBA3BY3B,aAiCpBgB,EAAUf,IAAOC,IAAVgC,KAWPF,EAAO/B,IAAOC,IAAViC,KAoBKT,sTChETU,mLAEF,OACExC,EAAAC,EAAAC,cAACuC,EAAD,aAH0BrC,aAU1BgB,EAAUf,IAAOC,IAAVoC,KAcEF,upBCrBTG,cACJ,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA7B,KAAA2B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjC,KAAMC,KAMRE,iBAAmB,WAAM,IACfD,EAAc0B,EAAKM,MAAnBhC,UACR0B,EAAKO,SAAS,CACZjC,WAAYA,KARd0B,EAAKM,MAAQ,CACXhC,WAAW,GAHI0B,wEAcV,IACCQ,EAAapC,KAAKC,MAAlBmC,SACAlC,EAAcF,KAAKkC,MAAnBhC,UAER,OACElB,EAAAC,EAAAC,cAACmD,EAAD,CACEhC,UAAU,QAEVrB,EAAAC,EAAAC,cAACoD,EAAD,CACEpC,UAAWA,EACXC,iBAAkBH,KAAKG,mBAEzBnB,EAAAC,EAAAC,cAACqD,EAAD,CACElC,UAAWH,EAAY,YAAa,IAEpClB,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,KACGL,GAEHpD,EAAAC,EAAAC,cAACwD,EAAD,eAlCatD,aAyCjBgB,EAAUf,IAAOC,IAAVqD,KAUPJ,EAAOlD,IAAOC,IAAVsD,KAQJH,EAAUpD,IAAOC,IAAVuD,IAMT,IAKWlB,IC5DAmB,mLAVX,OACE9D,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAC8D,EAAD,eALS5D,aCQE6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACLvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACExE,EAAAC,EAAAC,cAACuE,EAAD,OAEFC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2043f467.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div>\n        Home\n        <Section />\n        <Section />\n        <Section />\n        <Section />\n        <Section />\n        <Section />\n        <Section />\n      </div>\n    );\n  }\n}\n\nconst Section = styled.div`\n  border: 1px solid red;\n  height: 500px;\n`;\n\nexport default HomePage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport HomePage from '../HomePage';\n\nconst Main = () => (\n  <Switch>\n    <Route path='/' exact component={HomePage} />\n  </Switch>\n);\n\nexport default Main;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass NavBar extends Component {\n  render() {\n    const { isInAside, toogleConfigMenu } = this.props;\n\n    return (\n      <Wrapper\n        isInAside={isInAside}\n      >\n        <div className='logo-container'>\n          Anunnakys\n        </div>\n        <div className='options-container'>\n          <Option>\n            <Icon className='fas fa-adjust' />\n          </Option>\n          <Option\n            onClick={toogleConfigMenu}\n          >\n            <Icon \n              className='fas fa-cog'\n            />\n          </Option>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  left: ${({ isInAside }) => (isInAside ? '-270px' : 0)};\n  z-index: 1;\n  box-sizing: border-box;\n  width: 100%;\n  height: 80px;\n  background-color: #0090dd;\n  padding: 0 35px 0 20px;\n  display: flex;\n  color: white;\n  .logo-container {\n    width: 50%;\n    display: flex;\n    align-items: center;\n  }\n\n  .options-container {\n    width: 50%;\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst Option = styled.div`\n  height: 100%;\n  width: auto;\n  min-width: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  margin-left: 5px;\n`;\n\nconst Icon = styled.i`\n  color: white;\n  font-size: 24px;\n`;\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass SideBarMenu extends Component {\n  getMenuOptions = () => {\n    const options = [\n      {\n        icon: 'fas fa-users',\n        text: 'Users',\n      },\n      {\n        icon: 'fas fa-calendar-week',\n        text: 'Events',\n      },\n    ];\n    return options.map(item => (\n      <Item>\n        <div className='icon'>\n          <i className={item.icon} />\n        </div>\n        <div className='text'>\n          {item.text}\n        </div>\n      </Item>\n    ));\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {this.getMenuOptions()}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  background-color: rgba(0,0,0,0.75);\n  box-sizing: border-box;\n  width: 100px;\n  position: fixed;\n  height: 100%;\n  min-height: 100%;\n  overflow-y: auto;\n  clear: both;\n`;\n\nconst Item = styled.div`\n  border-bottom: 1px solid rgba(255,255,255,0.15);\n  width: 100%;\n  height: 88px;\n  text-align: center;\n  color: white;\n  cursor: pointer;\n  clear: both;\n  &:hover {\n    background-color: rgba(255,255,255,0.05);\n  }\n  .icon {\n    padding-top: 12px;\n    font-size: 35px;\n  }\n  .text {\n    padding-top: 5px;\n  }\n`;\n\nexport default SideBarMenu;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass SideBarConfigMenu extends Component {\n  render() {\n    return (\n      <Wrapper>\n        {/* config menu */}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  width: 270px;\n  height: 100%;\n  min-height: 100%;\n  overflow-y: auto;\n  z-index: 99999;\n  top: 0;\n  position: fixed;\n  margin-left: 100%;\n  background-color: rgba(0,0,0,0.75);\n  color: white;\n`;\n\nexport default SideBarConfigMenu;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport NavBar from './globalComponents/NavBar';\nimport SideBarMenu from './globalComponents/SideBarMenu';\nimport SideBarConfigMenu from './globalComponents/SideBarConfigMenu';\n\nclass MainBody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInAside: false,\n    };\n  }\n\n  toogleConfigMenu = () => {\n    const { isInAside } = this.state;\n    this.setState({\n      isInAside: !isInAside,\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { isInAside } = this.state;\n\n    return (\n      <Wrapper\n        className='test'\n      >\n        <NavBar\n          isInAside={isInAside}\n          toogleConfigMenu={this.toogleConfigMenu}\n        />\n        <Body\n          className={isInAside ? 'isInAside': ''}\n        >\n          <SideBarMenu />\n          <Content>\n            {children}\n          </Content>\n          <SideBarConfigMenu />\n        </Body>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  .isInAside {\n    left: -270px;\n  }\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  z-index: -1;\n`;\n\nconst Body = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  width: 100%;\n  margin-top: 80px;\n  min-height: calc(100% - 80px);\n`;\n\nconst Content = styled.div`\n  position: absolute;\n  min-height: calc(100% - 60px);\n  margin: 0 0 0 100px;\n  padding: 30px;\n  background-color: rgba(0,0,0,0.05);\n  ${'' /* height: 100px; */}\n  width: calc(100% - 160px);\n  max-width: calc(100% - 160px);\n`;\n\nexport default MainBody;\n","import React, { Component } from 'react';\nimport Main from './components/globalComponents/Main';\nimport MainBody from './components/MainBody';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n       <MainBody>\n         <Main />\n       </MainBody>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}